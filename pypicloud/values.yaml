# Default values for pypicloud.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: stevearc/pypicloud
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.3.12"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Additional environment variable
extraEnv: []

# Configuration file (config.ini)
config:
  # The name of configmap, if it is specified, then it will be took.
  # Otherwise it will be created auto.
  name: ""

  # Options
  storage_backend:
    files:
      enabled: true
    s3:
      enabled: false
      # It will be pass to storage.*
      params:
        bucket: ""
        aws_access_key_id: ""
        aws_secret_access_key: ""
        # prefix: ""
        # public_url: false
        # endpoint_url: ""
  
  cache:
    # Create only for sql
    # Example of url for sql
    # sqlite:///%(here)s/db.sqlite
    # mysql://root@127.0.0.1:3306/pypi?charset=utf8mb4
    # postgresql://postgres@127.0.0.1:5432/postgres
    url: "sqlite:///data/db.sqlite"

  access_control_backend:
    # It is name of bakcend
    config:
      enable: True
      params: {}
        # scheme: ""
        # rounds: ""

        # # user: stevearc, pass: gunface
        # user.stevearc = $5$rounds=80000$yiWi67QBJLDTvbI/$d6qIG/bIoM3hp0lxH8v/vzxg8Qc4CJbxbxiUH4MlnE7
        # # user: dsa, pass: paranoia
        # user.dsa = $5$rounds=80000$U/lot7eW6gFvuvna$KDyrQvi40XXWzMRkBq1Z/0odJEXzqUVNaPIArL/W0s6

        # # GROUPS
        # group.sharkfest =
        #     stevearc
        #     dsa
        # group.brotatos =
        #     dsa

        # # PACKAGES
        # package.django_unchained.user.stevearc = rw
        # package.django_unchained.group.sharkfest = rw

        # package.polite_requests.user.dsa = rw
        # package.polite_requests.group.authenticated = r
        # package.polite_requests.group.brotatos = rw

    # After you set up a new server using this backend,
    # you will need to use the web interface to create the initial admin user.
    sql:
      enable: False
      url: ""

    # At the moment there is no way for pypicloud to discern groups from LDAP,
    # so it only has the built-in group: admin, authenticated, and everyone.
    # All authorization is configured using pypi.default_read, pypi.default_write,
    # and pypi.cache_update.
    # If you need to use groups, you can use the auth.ldap.fallback setting below.
    # https://pypicloud.readthedocs.io/en/latest/topics/access_control.html#ldap-authentication
    ldap:
      enable: False
      # It will be pass to auth.ldap.*
      params: {}
        # url: ""
        # service_dn: ""
        # service_password: ""
        # service_username: ""
        # user_dn_format: ""
        # base_dn: ""
        # user_search_filter: ""
        # admin_field: ""
        # admin_value: ""
        # admin_group_dn: ""
        # cache_time: ""
        # ignore_cert: ""
        # ignore_referrals: ""
        # ignore_multiple_results: ""
        # fallback: ""

  # Params for whole pypicloud
  params:
    session.encrypt_key: replaceme
    session.validate_key: replaceme
    session.secure: "true"

    # group name: authenticated, everyone
    # The list it
    pypi.default_read: everyone
    pypi.default_write: authenticated
    # If you want install everyone and you had enabled the cache,
    # you should to enable and update the cache for everyone.
    # pypi.cache_update = everyone authenticated

    # Cache from pypi.org
    # Values: none, redirect, cache
    # https://pypicloud.readthedocs.io/en/latest/topics/configuration.html#pypi-fallback
    # pypi.fallback: cache
